// Code generated by mockery v2.34.2. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/MitulShah1/golang-rest-api-template/internal/handlers/product/model"
	mock "github.com/stretchr/testify/mock"
)

// ProductServiceInterface is an autogenerated mock type for the ProductServiceInterface type
type ProductServiceInterface struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: ctx, _a1
func (_m *ProductServiceInterface) CreateProduct(ctx context.Context, _a1 model.CreateProductRequest) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.CreateProductRequest) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteProduct provides a mock function with given fields: ctx, id
func (_m *ProductServiceInterface) DeleteProduct(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProductDetail provides a mock function with given fields: ctx, id
func (_m *ProductServiceInterface) GetProductDetail(ctx context.Context, id int) (*model.ProductDetailResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *model.ProductDetailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*model.ProductDetailResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *model.ProductDetailResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.ProductDetailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateProduct provides a mock function with given fields: ctx, pid, _a2
func (_m *ProductServiceInterface) UpdateProduct(ctx context.Context, pid int, _a2 model.UpdateProductRequest) error {
	ret := _m.Called(ctx, pid, _a2)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, model.UpdateProductRequest) error); ok {
		r0 = rf(ctx, pid, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProductServiceInterface creates a new instance of ProductServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProductServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProductServiceInterface {
	mock := &ProductServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
